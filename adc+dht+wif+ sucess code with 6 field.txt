#include <Arduino.h>
#include "Ticker.h"
#include "DHTesp.h"
#ifndef ESP32
#pragma message(THIS EXAMPLE IS FOR ESP32 ONLY!)
#error Select ESP32 board.
#endif
#include <Wire.h>
#include <Adafruit_ADS1015.h>
#include <HTTPClient.h>
 
const char* ssid = "deeeepv2";
const char* password =  "wwwpassword";

 Adafruit_ADS1115 ads;

/** Initialize DHT sensor 1 */
DHTesp dhtSensor1;
/** Initialize DHT sensor 2 */
DHTesp dhtSensor2;
TaskHandle_t tempTaskHandle = NULL;
/** Pin number for DHT11 1 data pin */
int dhtPin1 = 17;
/** Pin number for DHT11 2 data pin */
int dhtPin2 = 18;
/** Ticker for temperature reading */
Ticker tempTicker;
/** Flags for temperature readings finished */
bool gotNewTemperature = false;
/** Data from sensor 1 */
TempAndHumidity sensor1Data;
/** Data from sensor 2 */
TempAndHumidity sensor2Data;
/* Flag if main loop is running */
bool tasksEnabled = false;
void tempTask(void *pvParameters) {
  Serial.println("tempTask loop started");
  while (1) // tempTask loop
  {
    if (tasksEnabled && !gotNewTemperature) { // Read temperature only if old data was processed already
      // Reading temperature for humidity takes about 250 milliseconds!
      // Sensor readings may also be up to 2 seconds 'old' (it's a very slow sensor)
      sensor1Data = dhtSensor1.getTempAndHumidity();  // Read values from sensor 1
      sensor2Data = dhtSensor2.getTempAndHumidity();  // Read values from sensor 1
      gotNewTemperature = true;
    }
    vTaskSuspend(NULL);
  }
}

/**
 * triggerGetTemp
 * Sets flag dhtUpdated to true for handling in loop()
 * called by Ticker tempTicker
 */
void triggerGetTemp() {
  if (tempTaskHandle != NULL) {
     xTaskResumeFromISR(tempTaskHandle);
  }
}

/**
 * Arduino setup function (called once after boot/reboot)
 */
void setup() {
  Serial.begin(115200);
  Serial.println("Getting single-ended readings from AIN0..3");
  Serial.println("ADC Range: +/- 6.144V (1 bit = 3mV/ADS1015, 0.1875mV/ADS1115)");
  ads.setGain(GAIN_TWOTHIRDS);
  // ads.setGain(GAIN_SIXTEEN);    // 16x gain  +/- 0.256V  1 bit = 0.125mV  0.0078125mV
     ads.begin();
  Serial.println("DHT11 sensors");

  // Initialize temperature sensor 1
  dhtSensor1.setup(dhtPin1, DHTesp::DHT11);
  // Initialize temperature sensor 2
  dhtSensor2.setup(dhtPin2, DHTesp::DHT11);
 delay(4000);
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.println("Connecting to WiFi..");
  }
  Serial.println("Connected to the WiFi network");
 
  // Start task to get temperature
  xTaskCreatePinnedToCore(
      tempTask,                      /* Function to implement the task */
      "tempTask ",                    /* Name of the task */
      4000,                          /* Stack size in words */
      NULL,                          /* Task input parameter */
      5,                              /* Priority of the task */
      &tempTaskHandle,                /* Task handle. */
      1);                            /* Core where the task should run */

  if (tempTaskHandle == NULL) {
    Serial.println("[ERROR] Failed to start task for temperature update");
  } else {
    // Start update of environment data every 30 seconds
    tempTicker.attach(30, triggerGetTemp);
  }

  // Signal end of setup() to tasks
  tasksEnabled = true;
} // End of setup.


/**
 * loop
 * Arduino loop function, called once 'setup' is complete (your own code
 * should go here)
 */
void loop() {
 delay(5432);

  if (gotNewTemperature) {
    Serial.println("Sensor 1 data:");
    Serial.println("Temp: " + String(sensor1Data.temperature,2) + "'C Humidity: " + String(sensor1Data.humidity,1) + "%");
    Serial.println("Sensor 2 data:");
    Serial.println("Temp: " + String(sensor2Data.temperature,2) + "'C Humidity: " + String(sensor2Data.humidity,1) + "%");
    gotNewTemperature = false;
 delay(3000);}
 else{
  delay(3000);}
     int16_t adc0, adc1, adc2, adc3;

  adc0 = ads.readADC_SingleEnded(0);
  adc1 = ads.readADC_SingleEnded(1);
  adc2 = ads.readADC_SingleEnded(2);
  adc3 = ads.readADC_SingleEnded(3);
  Serial.print("AIN0: "); Serial.println(adc0);
  Serial.print("AIN1: "); Serial.println(adc1);
  Serial.print("AIN2: "); Serial.println(adc2);
  Serial.print("AIN3: "); Serial.println(adc3);
  Serial.println(" ");
  float Voltage0 = 0.0;
  float Voltage1 = 0.0;
  float Voltage2 = 0.0;
  float Voltage3 = 0.0;
   Voltage0 = (adc0 * 0.1875)/1000;
   Serial.print("Voltage0: "); Serial.println(Voltage0);
   Voltage1 = (adc1 * 0.1875)/1000;
   Serial.print("Voltage1: "); Serial.println(Voltage1);
   Voltage2 = (adc2 * 0.1875)/1000;
   Serial.print("Voltage2: "); Serial.println(Voltage2);
   Voltage3 = (adc3 * 0.1875)/1000;
   Serial.print("Voltage3: "); Serial.println(Voltage3);
  delay(1000);
   if ((WiFi.status() == WL_CONNECTED)) { //Check the current connection status
 
    HTTPClient http;

 String url="https://api.thingspeak.com/update?api_key=ZSGBJMOA5UK4ROW4&field1=";
 
 Serial.println(String(url) + String(Voltage0)+ "&field2=" + String(Voltage1)+ "&field3=" + String(Voltage2)+ "&field4=" + String(Voltage3)+ "&field5=" +  String(sensor1Data.temperature,2)+ "&field6=" + String(sensor1Data.humidity,1) ); 
   
 http.begin(String(url) + String(Voltage0)+ "&field2=" + String(Voltage1)+ "&field3=" + String(Voltage2)+ "&field4=" + String(Voltage3)+ "&field5=" +  String(sensor1Data.temperature,2)+ "&field6=" + String(sensor1Data.humidity,1));
 /*
    
    int a=3;
  int b=4; int c=5; int d=6; int e=7; int f=9; int g=11; int h=22;
   Serial.print("\https://api.thingspeak.com/update?api_key=2ZBWHY0STWPFMYVV&field1=%d\",a);
 // Serial.print("/https://api.thingspeak.com/update?api_key=2ZBWHY0STWPFMYVV&field1=/",a);
 // Serial.print("\"https://api.thingspeak.com/update?api_key=DII20NBI508BYPC7&field1="\,a\"&field2="\,b\"&field3="\,c\"&field4="\,d\"&field5="\,e\"&field6="\,f\"&field7="\,g\"&field8="\,h");
  //http.begin("\https://api.thingspeak.com/update?api_key=2ZBWHY0STWPFMYVV&field1=\,Voltage0");
 // http.begin("\https://api.thingspeak.com/update?api_key=DII20NBI508BYPC7&field1=\,a\&field2=\,b\&field3=\,c&field4=\,d\&field5=\,e\&field6=\,f\&field7=\,g\&field8=\,h");   
  */  int httpCode = http.GET();                                        //Make the request
    if (httpCode > 0) { //Check for the returning code
        String payload = http.getString();
        Serial.println(httpCode);
        Serial.println(payload);     
      }
     else {
      Serial.println("Error on HTTP request");
    }
     http.end(); //Free the resources
  }
   delay(10000);
 
} // End of loop